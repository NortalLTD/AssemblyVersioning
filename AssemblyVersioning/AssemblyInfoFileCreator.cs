/*
	Copyright 2013 Imre Pühvel, AS Nortal
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

	This file is from project https://github.com/NortalLTD/AssemblyVersioning, Nortal.Utilities.AssemblyVersioning, file 'AssemblyInfoFileCreator.cs'.
*/

using System;

namespace Nortal.Utilities.AssemblyVersioning
{
	public static class AssemblyInfoFileCreator
	{
		internal static String GetHeader(VersionGenerationContext context)
		{
			return GetNamespaceSection() + Environment.NewLine
				+ GetHeaderComments(context) + Environment.NewLine;
		}

		private static String GetNamespaceSection()
		{
			return "using System.Reflection;";
		}

		private static String GetHeaderComments(VersionGenerationContext context)
		{
			return @"
// NB! this file is automatically generated. All manual changes will be lost on build.
// Check ~/_tools/Nortal.Utilities.AssemblyVersioning.props file for other available algorithms and supported attributes.

// Generated based on assembly version: " + context.BaseVersion;
		}

		public static String GenerateAttributeRow<TAttribute>(IVersionGenerator generator, VersionGenerationContext context)
			where TAttribute : Attribute
		{
			if (generator == null) { throw new ArgumentNullException("generator"); }
			
			String version = generator.GenerateVersionInfoFrom(context);
			return GenerateAttributeRow<TAttribute>(generator.GetType().Name, version);
		}

		public static String GenerateAttributeRow<TAttribute>(String generator, String version)
			where TAttribute : Attribute
		{
			if (version == null) { return null; }

			const String pattern = @"[assembly: {0}(@""{1}"")] // algorithm: {2}
";
			String attributeName = typeof(TAttribute).Name
				.Replace(typeof(Attribute).Name, ""); //without Attribute at end.

			return String.Format(pattern,
				attributeName,
				version.Replace(@"""", @""""""), // support version content with double-quotes.
				generator);
		}
	}
}
